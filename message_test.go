package jdhcp

import (
	"github.com/google/go-cmp/cmp"
	"net"
	"testing"
)

var messageParseCases = []struct {
	asBytes  []byte
	asStruct Msg
}{
	// 0
	{[]byte{0x01, 0x01, 0x06, 0x00, 0x00, 0x00, 0x3d, 0x1d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0b, 0x82, 0x01, 0xfc, 0x42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x63, 0x82, 0x53, 0x63, 0x35, 0x01, 0x01, 0x3d, 0x07, 0x01, 0x00, 0x0b, 0x82, 0x01, 0xfc, 0x42, 0x32, 0x04, 0x00, 0x00, 0x00, 0x00, 0x37, 0x04, 0x01, 0x03, 0x06, 0x2a, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
		Msg{Op: 1,
			Htype:  1,
			Hlen:   6,
			Hops:   0,
			Xid:    0x00003D1D,
			Secs:   0,
			Flags:  0x0000,
			Ciaddr: net.IPv4(0, 0, 0, 0),
			Yiaddr: net.IPv4(0, 0, 0, 0),
			Siaddr: net.IPv4(0, 0, 0, 0),
			Giaddr: net.IPv4(0, 0, 0, 0),
			Chaddr: net.HardwareAddr([]byte{0x00, 0x0B, 0x82, 0x01, 0xFC, 0x42}),
			Sname:  "",
			File:   "",
			Cookie: Cookie,
			Options: Options{
				OptionDHCPMessageType:      {0x01},
				OptionClientID:             {0x01, 0x00, 0x0B, 0x82, 0x01, 0xFC, 0x42},
				OptionRequestedIPAddress:   {0x00, 0x00, 0x00, 0x00},
				OptionParameterRequestList: {0x01, 0x03, 0x06, 0x42},
			},
		},
	},
}

func TestParseMsg(t *testing.T) {
	for i, tc := range messageParseCases {
		got, err := ParseMsg(tc.asBytes)
		if err != nil {
			t.Errorf("case %d returned error: %s", i, err)
			continue
		}

		if diff := cmp.Diff(tc.asStruct, got); diff != "" {
			t.Errorf("case %d expected struct does not match result: %s", i, diff)
		}
	}
}

func TestMsgMarshalBytes(t *testing.T) {
	t.Fatal("no test case")
}
